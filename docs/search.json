[
  {
    "objectID": "program.html",
    "href": "program.html",
    "title": "1  Program",
    "section": "",
    "text": "Day 1.\n\nLecture 1. Oskar Hagen (Eucalyptus Room) - History and philosophy of simulation modelling in biodiversity studies\nCoffee Break\nLecture 2. Oskar and Alex - Overview and introduction to Gen3sis\nPractical 1. Installation and Set Up\nLunch Break.\nPractical 2. Gen3sis Config Basics\nCoffee Break\nPractical 2. Gen3sis Config Basics (contd.)\n\n\n\nDay. 2\n\nLecture 3. Alex - Biodiversity patterns and data\nCoffee Break\nPractical 3. Running simulations in Gen3sis\nlunch\nLecture 4. Tristan Salles – Paleoenvironmental models and data\nDiscussion\ncoffee break\nPractical 4. Modifying landscapes for Gen3sis\n\n\n\nDay 3.\n\nLecture 4. Alex and Oskar - Designing simulation experiments with Gen3sis\nCoffee Break\nPractical 6. Running simulation experiment with Gen3sis pt. 1\nLunch break\nPractical 7. Running simulation experiment with Gen3sis pt. 2\nCoffee Break\nDiscussion / Troubleshooting / Wrap up",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Program</span>"
    ]
  },
  {
    "objectID": "installation.html",
    "href": "installation.html",
    "title": "2  Installation and set up",
    "section": "",
    "text": "The first bottleneck for any workshop is getting the software installed and running on everyone’s machine. So we’ll spend a few minutes here making sure we’re all good with installing and taking a look at some of teh data we’ll be working with during the workshop, before moving on to the nitty gritty. So, lets start by installing the Gen3sis R package.\nYou can install the package directly from CRAN as follows.\n\ninstall.packages(\"gen3sis\")\npackageVersion(\"gen3sis\")\n\nToday we’ll install the most recent version of the package from GitHub using devtools.\n\ninstall.packages(\"devtools\")\ndevtools::install_github(repo = \"project-gen3sis/R-package\", dependencies = TRUE)\nlibrary(gen3sis)\npackageVersion(\"gen3sis\")\n\nAll the data for the workshop is stored in the ‘data’ folder.\n\ndata_dir &lt;- \"data\"\n\nIn this fodler we include a paleoenvironmental reconstruction of South American temperature and aridity at a coarse spatial resolution of 2 degrees, and at a temporal resolution of 1 million years. Load it in and investigate some of it’s features.\n\n# read the R data file\nlandscape &lt;- readRDS(file.path(data_dir,\"landscapes\", \"SA_coarse\", \"landscapes.rds\"))\n\n# class\nclass(landscape)\n\n# names\nnames(landscape)\n\n# dimensions\ndim(landscape$temp)\n\n# take a look at first elements\nlandscape$temp[1:10, 1:10]\n\n# column names\ncolnames(landscape$temp)\n\nCoolies. We can use different spatial R packages to play with our data, and later on, with our simulated output. Parts of gen3sis package use raster, however this package is now depreciated, so we’ll use terra except where stated. Ideally, you’ll install both.\n\ninstall.packages(\"terra\")\ninstall.packages(\"raster\")\n\nlibrary(terra)\n\n# Present Day South America\nSA_1 &lt;- rast(landscape$temp[ ,c(\"x\", \"y\", \"1\")])\nSA_65 &lt;- rast(landscape$temp[,c(\"x\", \"y\", \"65\")])\n\n# plot present day\nplot(SA_1)\n\n\n# plot 65 Million years ago\nplot(SA_65)\n\nLets overlay the maps to get an idea of how much South America has changed since the dinosaurs went extinct.\n\n# overlay\nplot(SA_65, col=rgb(1,0,0))\nplot(SA_1, col=rgb(0,0,1,0.5,1), add=T)\n\nLoad in a config file containing the rules and parameters of a single simulation. We’ll get into what this all means next chapter.\n\nconfig_dir &lt;- \"configs/SouthAmerica\"\nconfig &lt;- create_input_config(config_file = file.path(config_dir, \"config_southamerica.R\"))\nnames(config$gen3sis)\nnames(config$gen3sis$general)\n\nNow time to run a simulation in South America. We’ll just run from 20 million years ago to the present-day at 1 million year intervals so it runs quick enough to finish in a couple of minutes. Note the output as it runs. Think about what its printing.\n\nsim &lt;- run_simulation(config = file.path(config_dir, \"config_southamerica.R\"), \n               landscape = file.path(data_dir,\"landscapes\", \"SA_coarse\"),\n               output_directory = \"output/SouthAmerica\",\n               verbose=1)\n\nIf you’ve made it this far, great! You’re equipped with the tools, now we’re ready to explore how Gen3sis works in more detail.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Installation and set up</span>"
    ]
  },
  {
    "objectID": "basics.html",
    "href": "basics.html",
    "title": "3  Config Basics",
    "section": "",
    "text": "To begin the dive into what Gen3sis is, and how it operates, we’ll start by looking a config file. The config is the code for the ecological and evolutionary rules and other parameters of Gen3sis, such as the random see, instructions on saving output, etc.\nA config file is a a stand-alone R script which is modified by you. We can generate a new blank config file automatically to specified location in your configs folder and open it in R. Give that try.\n\nwrite_config_skeleton(\"configs/blank_config\")\n\nOnce you’ve got the hang of Gen3sis it’s straightforward to populate these with functions. However, for now, lets start with the config we used in the previous section. We should still have that config loaded in our workspaces, but if not run this code.\n\nconfig_dir &lt;- \"configs/SouthAmerica\"\nconfig &lt;- create_input_config(config_file = file.path(config_dir, \"config_southamerica.R\"))\n\nlets take a look at the config\n\nconfig\n\nOh boy, that’s intimidating. But, don’t stress, we’ll go through it piece by piece and learn what each bit is doing.\n\nstr(config)\nnames(config)\n\nWe can see that the config is a list with 3 components: 1. gen3sis, 2. user, 3. directories. For now, we’ll focus on gen3sis which is the meat of the config. This ‘gen3sis’ element itself is a list of 6 elements: ‘general’, ‘initialization’, ‘dispersal’, ‘speciation’,‘mutation’, and ‘ecology’.\n\nnames(config$gen3sis)\n\n\nGeneral\nThe first element, ‘general’, sets up some important global parameters of the model\n\nconfig$gen3sis$general\n\nThe random seed determines the starting point for random number generators in R. Because the simulations have stochastic processes, to reproduce a result, we need to have the same random seed, so by fixing it in a simulation, we can ensure we will get the exact same results next time we run the sim. Let’s change the seed to 777.\n\nconfig$gen3sis$general$random_seed\n\nconfig$gen3sis$general$random_seed &lt;- 777\n\nThe start time is the time-step of the landscape file which the simulation will start at. We saw in the previous chapter that the South American landscape file had 65 time-steps, but we actually only started our simulation at time-step 20, or 20 time-steps before the final one. Each time-step in the landscape is 1 million years apart, so the timestep 20 is 20 million years ago. However, if the landscape units were in 100 thousand years, then time-step 20 would be 2 million years ago. Let’s run the next simulation from an older timepoint, lets say the start of the Oligocene, 34 Ma.\n\nconfig$gen3sis$general$start_time\n\nconfig$gen3sis$general$start_time &lt;- 34\n\nOur simulation ran from 20 Ma to the present-day. However, we may wish for the simulation to finish before the present-day, for example just the Oligocene period 34Ma - 23Ma. To do this we can change the ‘end_time’. When left as NA, the simulation will run to the final time-step. So let’s change that to 23 Ma.\n\nconfig$gen3sis$general$end_time\n\nconfig$gen3sis$general$end_time &lt;- 23\n\n#Initialization {.unnumbered} The first step of any simulation is to populate your landscape with one or more species and assign them traits. This includes geographic distribution, types of traits to be implemented, and values for those traits. Every species in the simulation is stored in a list and consists of an ID, their abundance, trait values, and intraspecies divergence values.\n\n\nDispersal (migration)\nHow species disperse across the landscape is determined by simulated migration events between habitable cells. The range and behaviour of these events is set by users and can be based on fixed values, draws from probability distributions, species trait values, or anything else thought up by users.\n\n\nSpeciation (population divergence)\nThe speciation function determines how you want new species to form. This is based on a divergence counter and speciation threshold. Once two clusters within a species diverge enough to reach the speciation threshold, a new species forms. How the counter behaves is entirely up to users!\n\n\nMutation (trait evolution)\nEach species can have traits set by users. This function provides the opportunity to modify or “mutate” these traits with each time step in the simulation. How these traits change (or not) is entirely customisable.\n\n\nEcology (interactions)\nEvery species present in a cell across the landscape has an abundance value representing the population size of the species in that location. The ecology function allows users to modify this abundance value based on environmental values, species interactions, or anything else relevant to the study. An abundance of 0 leads to the extinction of the species in that cell.\n\noutput_dir &lt;- \"output/SouthAmerica\"\nsim &lt;- readRDS(file.path(output_dir, \"config_southamerica/sgen3sis.rds\"))\nnames(sim)\n\n\n\n#### Visualize --------------- \n#the outputs\nplot_summary(sim)\n\n# using raster package\nplot(rasterFromXYZ(sim$summary$`richness-final`))\n\nplot(rasterFromXYZ(sim$summary$`richness-final`), col=gen3sis::color_richness(10))\n\n\n# plot diversity at 3 time slices\ntimesteps &lt;- c(40, 20, 0)\npar(mfrow = c(1, 3))\nfor (i in timesteps) {\n  landscape_i &lt;- readRDS(file.path(output_dir, paste0(\"config_southamerica/landscapes/landscape_t_\", \n                                                    i, \".rds\")))\n  species_i &lt;- readRDS(file.path(output_dir, paste0(\"config_southamerica/species/species_t_\", \n                                                  i, \".rds\")))\n  plot_richness(species_i, landscape_i)\n}\ndev.off()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Config Basics</span>"
    ]
  },
  {
    "objectID": "output.html",
    "href": "output.html",
    "title": "4  Output",
    "section": "",
    "text": "The simulation output has several components which together, or seperately, allow for all kinds of analyses of resulting biodiversity patterns.\n\n5 Generate presence-absence matrix\nA presence/absence matrix is a commonly used format for performing ecological analyses, such as PD/MPD/MNTD in the picante package.\n# first set the directory to the output folder   # then load in landscape and species obejct at the final timestep (will work for any timestep) setwd(\"landscapes\") landscape &lt;- readRDS(\"landscape_t_0.rds\")  setwd(\"../species\") species &lt;- readRDS(\"species_t_0.rds\")  # grid cell names all_cells &lt;- rownames(landscape$coordinates)  # get 0 for absence and 1 for presence in each grid cell all_species_presence &lt;- do.call( cbind, lapply(species, FUN = function(x) {ifelse(all_cells %in% names(x$abundance), 1, 0)}))  # colnames are species names colnames(all_species_presence ) &lt;- unlist(lapply(species, function(x){x$id}))  # column bind with x/y coordinates  presence_absence_matrix &lt;- cbind(landscape$coordinates, all_species_presence)\n\n\n6 Calculate taxonomic & phylogenetic diversity\nThe first step in your analysis could for instance be to calculate mean species richness per grid cell.\n# read in the richness object for the desired timestep richness &lt;- readRDS(\"richness_t_0.rds\")) richness_mean &lt;- mean(richness, na.rm=T)  \nThen you might want to look at indices of phylogenetic diversity.\n# read in the phylogeny for the desired timestep phy &lt;- try(read.nexus(\"phylogeny_t_0.nex\")))  # to make the simulations comparable, you should probably rescale each of them using the following function  rescaleTree&lt;-function(tree,scale){   tree$edge.length&lt;-     tree$edge.length/max(nodeHeights(tree)[,2])*scale   return(tree) }  phy &lt;- rescaleTree(phy, 1)  # now that you have a presence-absence matrix, you can calculate phylogenetic community  # metrics like Faith's PD, MPD, and MNTD  pd_estimate &lt;- pd.query(phy, presence_absence_matrix, standardize = T) mpd_estimate &lt;- mpd.query(phy, presence_absence_matrix, standardize = T) mntd_estimate &lt;- mpd.query(phy, presence_absence_matrix, standardize = T)\n\n\n7 Calculate functional diversity\nOne amazing feature of gen3sis is the possibility to let traits evolve with your simulation. The traits are defined in your core functions and can be anything, temperature niche, body size, or the number of limbs. The world is your oyster! To draw meaningful conclusions from your experiment you might have to\n# load in the traits from the desired time step traits &lt;- readRDS(\"traits_t_0.rds\"))  # transform from a list into a readable vector   temp_trait_means &lt;- unlist(lapply(traits, FUN=function(x){y=mean(x[,\"temp\"], na.rm=T);return(y)})) # this is the temperature niche    bs_trait_means &lt;- unlist(lapply(traits, FUN=function(x){y=mean(x[,\"body_size\"], na.rm=T);return(y)})) # and this represents bodysize   # exploring different summary statistics of the same metrics  temp_mean&lt;- mean(temp_trait_means, na.rm=T) # mean temp niche  temp_sd &lt;- sd(temp_trait_means, na.rm=T) # sd temp niche  temp_skewness[i] &lt;- skewness(temp_trait_means, na.rm=T)     bs_mean&lt;- mean(bs_trait_means, na.rm=T) # mean temp niche  bs_sd &lt;- sd(bs_trait_means, na.rm=T) # sd temp niche\n\n\n8 Calculate batch of spatial, phylogenetic, and functional metrics\nThis script calculates a set of 53 summary statistics used in Skeels et al (2021) and gives an example of, not only how to calculate a variety of different metrics, but also how to do so on a large batch of simulations (here we loop over the output folders of 500 simulations).\n\n\n9 Calculate diversification rates through space and time\nThis script calculates speciation rates and extinction at each time step and also summarises speciation rates and extinction by both temperature and latitude to understand the spatial variation in diversification rates.\n\n\n10 Calculate phylogenetic and weighted endemisms\nThis script calculates phylogenetic and weighted endemism from simulated data.\n\n\n11 Standalone functions\nAnother way of organizing analysis tools is to have a set of functions similar to an R package that can be called in various scripts. Here is a set of various example functions to use / look through.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Output</span>"
    ]
  },
  {
    "objectID": "considerations.html",
    "href": "considerations.html",
    "title": "5  Considerations",
    "section": "",
    "text": "5.0.1 Paleo-environmental data\nInvestigations of deep-time paleoclimatic influences on biodiversity are still limited by our current mechanistic knowledge of eco-evolutionary processes and by computational power, as well as by the availability of paleo-environmental reconstructions (Svenning et al., 2015, Franklin et al., 2017, Pontarp et al., 2019). Biodiversity dynamics and climatic variations happening on smaller spatio-temporal scales have to be ignored due to the uncertainty in paleo-landscape reconstructions.\n\n\n5.0.2 Distribution, fossil and phylogenetic data\nBiodiversity data is of the essence when evaluating implemented processes of eco-evolutionary models with empirical biodiversity patterns. In order to perform the evaluation, multiple past and present biological empirical datasets can be used, such as: (i) fossil records, (ii) calibrated molecular phylogenies, (iii) population genetic data, (iv) trait measurements, and (v) species distribution maps. The combination of multiple datasets, such as phylogenies and fossils, provides a better picture of past dynamic processes (Huang et al., 2015, Hagen et al., 2018, Coiro et al., 2019). The main gaps remaining in biodiversity data, as pointed out in multiple studies (Franklin, 2010, Hampton et al., 2015, Meyer et al., 2016), are: (i) sparse data with regional biases, (ii) a lack of non-occurrence data reporting, (iii) poor availability of public data, and (iv) high heterogeneity in data quality and methodologies.\n\n\n5.0.3 Model complexity\nThe modelling engine gen3sis introduced here is predominantly a theoretical model rather than exclusively a calculating tool, since responses from possible natural processes are predicted (Guisan and Zimmermann, 2000). By prioritizing theoretical correctness of the predicted response over predicted precision, a spatio-temporal mechanistic model was created in the most flexible way possible in order to explore multiple hypotheses and processes.\n\n\n5.0.4 Computational time\nRuntimes are heavily dependent on the number of species emerging during a simulation and their geographical extent, and thus are highly dependent on the assumed model parameters and input landscape. The current state of optimizations is limited because no parallelization is implemented, as ease of maintenance and development are prioritized for this initial release.\n\n\n5.0.5 Core functions\nGiven the inherent computational limitations, gen3sis tries to incorporate all the processes at the level of geographical ranges of populations, as realistically as possible. However, the modelled objects are limited to geographic populations and species. Also, it is not possible to track cluster phylogenies. Moreover, there is no within-cell variation within a species.\n\n\n5.0.6 Caveats\n\n\ntemporal behaviour: No variables in gen3sis have an explicit temporal component. It is always x/timestep. That means that most processes will either speed up or slow down if one changes the temporal resolution of the input. For example, a configured rate of dispersal of 1/timestep can become 10/million years or 2/million years for simulations with 10 and 2 timesteps per million years respectively.\n\nraster inputs: The behaviour of the species dispersal and geographic clustering depends on the spatial input resolution. Changing input resolution can have secondary effects. For example, a higher-resolution landscape input will have more cells. Not only will it be easier to reach neighbouring cells, but there will also be more chances for dispersal events to happen. As such there might be a non-linear dependency between dispersal values and input resolution.\n\npolar distortions: Our distance calculations correct for the distance distortions raster-based data experiences towards the polar regions. This does lead to many small cells being close together in the polar regions. This makes dispersal a lot easier compared to equatorial cells in two ways. First, the dispersal distances are often enough to reach multiple neighbours. And second, since there are many more cells closed by, more dispersal events can happen.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Considerations</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Center for Biodiversity Analysis: Gen3sis Workshop 2024",
    "section": "",
    "text": "Welcome!\nWelcome to the CBA sponsored workshop on the Gen3sis biodiversity simulation software. We’ll be using this Quarto book to navigate through the workshop. Quarto allows us to embed R code throughout.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "Welcome!"
    ]
  }
]
{
  "hash": "c56ede885ff20a73d36af9f6ed4154ac",
  "result": {
    "markdown": "---\ntitle: \"üñ•Ô∏è Silicodiversity\"\nauthor: \"Alex Skeels and Oskar Hagen\"\nexecute: \n  eval: TRUE\n---\n\n\n## Exploring outputs {.unnumbered}\n\nIn this practical we will explore the outputs from gen3sis using the island simulations we ran yesterday. We will learn how to use this data with common R packages for phylogenetic comparative methods, community phylogenetics, biogeography and much more.\n\nThe goal for today will be to produce:\n\n1.  A map of Species Richness from the simulation summary object\n\n2.  edeA plot of Lineages Through Time from the phylogeny\n\n3.  Plot of species trait values on a phylogenetic tree, by linking the species objects to the phylogeny\n\n4.  Maps of Phylogenetic Diversity by linking species objects to the landscape and phylogeny\n\nFirst, let's make sure we have the necessary packages loaded\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(gen3sis)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: gen3sis\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'gen3sis' was built under R version 4.2.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe legacy packages maptools, rgdal, and rgeos, underpinning the sp package,\nwhich was just loaded, will retire in October 2023.\nPlease refer to R-spatial evolution reports for details, especially\nhttps://r-spatial.org/r/2023/05/15/evolution4.html.\nIt may be desirable to make the sf package available;\npackage maintainers should consider adding sf to Suggests:.\nThe sp package is now running under evolution status 2\n     (status 2 uses the sf package in place of rgdal)\n```\n:::\n\n```{.r .cell-code}\nrequire(terra)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: terra\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'terra' was built under R version 4.2.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nterra 1.7.39\n```\n:::\n\n```{.r .cell-code}\nrequire(ape)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: ape\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'ape'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:terra':\n\n    rotate, trans, zoom\n```\n:::\n\n```{.r .cell-code}\nrequire(phytools)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: phytools\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: maps\n```\n:::\n\n```{.r .cell-code}\nrequire(picante)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: picante\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: vegan\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'vegan' was built under R version 4.2.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: permute\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: lattice\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThis is vegan 2.6-4\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'vegan'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:phytools':\n\n    scores\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: nlme\n```\n:::\n\n```{.r .cell-code}\nrequire(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: here\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nhere() starts at C:/Users/am92guke/Documents/iDiv/code/gen3sis_Australia_ANU_2024/CBAGen3sis\n```\n:::\n\n```{.r .cell-code}\nsetwd(here())\n```\n:::\n\n\n#### Simulation summary object (sgen3sis.rds) {.unnumbered}\n\nThe first object we will look at today is the sgenesis.rds file. This file contains a summary of the simulation. Which we can plot (as we did yesterday) with the plot_summary function. This is the same object, that you would have in memory by running a simulation with run_simulation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noutput_dir <- \"output/islands\" \n\nsim <- readRDS(file.path(output_dir, \"config_islands_simple_Day1Prac3_M1/sgen3sis.rds\")) \n\n# look at what the simulation summary contains\nnames(sim)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"summary\"    \"flag\"       \"system\"     \"parameters\"\n```\n:::\n:::\n\n\nThe first element is the sim summary. This contains a record of the history of speciation, extinction, and species richness through time (phylo_summary), a history of the number of total grid cells occupied during the simulation through time (occupancy) and the species richness of each grid cell at the final time step.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(sim$summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 3\n $ phylo_summary : num [1:52, 1:4] 4 4 4 4 4 4 4 4 4 4 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:52] \"initial\" \"50\" \"49\" \"48\" ...\n  .. ..$ : chr [1:4] \"total\" \"alive\" \"speciations\" \"extinctions\"\n $ occupancy     : Named num [1:52] 1 0.353 0.338 0.325 0.317 ...\n  ..- attr(*, \"names\")= chr [1:52] \"initial\" \"50\" \"49\" \"48\" ...\n $ richness-final: num [1:3600, 1:3] 0.5 1.5 2.5 3.5 4.5 5.5 6.5 7.5 8.5 9.5 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:3600] \"1\" \"2\" \"3\" \"4\" ...\n  .. ..$ : chr [1:3] \"x\" \"y\" \"0\"\n```\n:::\n\n```{.r .cell-code}\n# phylo summary\nhead(sim$summary$phylo_summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        total alive speciations extinctions\ninitial     4     4           4           0\n50          4     4           0           0\n49          4     4           0           0\n48          4     4           0           0\n47          4     4           0           0\n46          4     4           0           0\n```\n:::\n\n```{.r .cell-code}\n# occupancy\nhead(sim$summary$occupancy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  initial        50        49        48        47        46 \n1.0000000 0.3530592 0.3384913 0.3254939 0.3166969 0.3069481 \n```\n:::\n\n```{.r .cell-code}\n# occupancy\nhead(sim$summary$`richness-final`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    x    y 0\n1 0.5 59.5 0\n2 1.5 59.5 0\n3 2.5 59.5 0\n4 3.5 59.5 0\n5 4.5 59.5 0\n6 5.5 59.5 0\n```\n:::\n:::\n\n\nThese data can be visualized with the plot_summary function\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Visualize the outputs \nplot_summary(sim)\n```\n\n::: {.cell-output-display}\n![](Day2_Prac4_outputs_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nWe can also use these data to map out patterns of species richness\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# make sure the landscape is loaded\nlc <- readRDS(file.path(\"data\", \"landscapes\", \"islands\",\"landscapes.rds\"))\n\n# can remove cells with elevation below sea level at timestep 0 (present-day) to see the outlines of the islands\nna_mask <- is.na(lc$elevation[,\"0\"])\nrich <- sim$summary$`richness-final`\nrich[na_mask,3] <- NA\n\n# turn richness summary into a raster \nrichness <- rast(rich, type=\"xyz\")\n\n# plot, the sea is darblue, given by hexadecimal color code \nplot(richness, col=c(\"grey\", gen3sis::color_richness(12)), colNA=\"#000033\")\n```\n\n::: {.cell-output-display}\n![](Day2_Prac4_outputs_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nThe next part of the simulation summary object is the flag which will tell us if the simulation ran successfully. It should give \"OK\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim$flag\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"OK\"\n```\n:::\n:::\n\n\nNext is the system summary. This is information about the R version, R packages, and operating system used in the simulation. This ensures complete repeatability. It also tells us the runtime of the simulation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim$system\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$`runtime-hours`\n[1] 0.05880596\n\n$`gen3sis-version`\n[1] '1.5.11'\n\n$`R-version`\n               _                                \nplatform       x86_64-w64-mingw32               \narch           x86_64                           \nos             mingw32                          \ncrt            ucrt                             \nsystem         x86_64, mingw32                  \nstatus                                          \nmajor          4                                \nminor          2.2                              \nyear           2022                             \nmonth          10                               \nday            31                               \nsvn rev        83211                            \nlanguage       R                                \nversion.string R version 4.2.2 (2022-10-31 ucrt)\nnickname       Innocent and Trusting            \n\n$OS\n  sysname \n\"Windows\" \n\n$`session-information`\nR version 4.2.2 (2022-10-31 ucrt)\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\nRunning under: Windows 10 x64 (build 19045)\n\nMatrix products: default\n\nlocale:\n[1] LC_COLLATE=English_World.utf8  LC_CTYPE=English_World.utf8   \n[3] LC_MONETARY=English_World.utf8 LC_NUMERIC=C                  \n[5] LC_TIME=English_World.utf8    \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] picante_1.8.2       nlme_3.1-160        vegan_2.6-4        \n [4] lattice_0.20-45     permute_0.9-7       phytools_1.2-0     \n [7] maps_3.4.1          apTreeshape_1.5-0.1 ape_5.6-2          \n[10] terra_1.7-39        gen3sis_1.5.11     \n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.10             compiler_4.2.2          tools_4.2.2            \n [4] pkgload_1.3.2.1         lifecycle_1.0.3         gdistance_1.6.4        \n [7] mgcv_1.8-41             pkgconfig_2.0.3         rlang_1.1.1            \n[10] fastmatch_1.1-3         Matrix_1.5-3            igraph_1.5.0.1         \n[13] cli_3.4.1               rstudioapi_0.14         parallel_4.2.2         \n[16] SparseM_1.81            expm_0.999-6            xfun_0.39              \n[19] coda_0.19-4             cluster_2.1.4           stringr_1.5.0          \n[22] raster_3.6-23           knitr_1.43              generics_0.1.3         \n[25] vctrs_0.6.3             MatrixModels_0.5-1      scatterplot3d_0.3-42   \n[28] combinat_0.0-8          grid_4.2.2              glue_1.6.2             \n[31] plotrix_3.8-2           pbapply_1.6-0           optimParallel_1.0-2    \n[34] survival_3.4-0          phangorn_2.10.0         sp_2.0-0               \n[37] magrittr_2.0.3          codetools_0.2-18        MASS_7.3-58.1          \n[40] splines_4.2.2           mnormt_2.1.1            cubature_2.0.4.5       \n[43] numDeriv_2016.8-1.1     quadprog_1.5-8          quantreg_5.94          \n[46] stringi_1.7.8           clusterGeneration_1.3.7\n```\n:::\n:::\n\n\nFinally the summary object contains the config information and model parameters used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim$parameters\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$gen3sis\n$gen3sis$general\n$gen3sis$general$random_seed\n[1] 666\n\n$gen3sis$general$start_time\n[1] 50\n\n$gen3sis$general$end_time\n[1] 0\n\n$gen3sis$general$max_number_of_species\n[1] 50000\n\n$gen3sis$general$max_number_of_coexisting_species\n[1] 20000\n\n$gen3sis$general$end_of_timestep_observer\nfunction(data, vars, config){\n  plot_richness(data$all_species, data$landscape)\n  save_species() # saves a species and landscape objects for desired timesteps\n}\n<environment: 0x00000158758e4698>\n\n$gen3sis$general$trait_names\n[1] \"dispersal\"         \"temp_niche_centre\" \"temp_width\"       \n[4] \"start_island\"     \n\n$gen3sis$general$environmental_ranges\nlist()\n\n$gen3sis$general$verbose\n[1] 1\n\n\n$gen3sis$initialization\n$gen3sis$initialization$initial_abundance\n[1] 1\n\n$gen3sis$initialization$create_ancestor_species\nfunction(landscape, config) {\n  # browser()\n  co <- landscape$coordinates\n  \n  # If we wouldn't have passe the patches though the environment, we could have done this:\n  # sp1 <- co[which(co[,1]<20&co[,2]<30),]\n  # sp2 <- co[which(co[,1]>20&co[,2]<30),]\n  # sp3 <- co[which(co[,1]<20&co[,2]>30),]\n  # sp4 <- co[which(co[,1]>20&co[,2]>30),]\n  \n  # however, we made thinks simpler to you.\n  # get patches vector\n  pv <- landscape$environment[, \"patch\"]\n  \n  # species_coords <- list(sp1,\n  #                        sp2,\n  #                        sp3,\n  #                        sp4)\n  new_species <- list()\n  \n  \n  # Species 1 - high dispersal, low niche breadth\n  # Species 2 - medium-high dispersal, medium-low niche breadth\n  # Species 3 - medium-low dispersal, medium-high niche breadth\n  # Species 4 - low dispersal, high niche breadth\n  \n  manual_traits <- list(\n    \"dispersal\" = c(5, 5, 5, 5),\n    \"temp_width\" = c(1, 1, 1, 1)\n  )\n  \n  for (sp_i in 1:4){\n    # create a species empty object\n    new_species[[sp_i]] <- create_species(names(pv[pv==sp_i]), config)\n    # set manual dispersal and niche width\n    new_species[[sp_i]]$traits[ , \"dispersal\"] <- manual_traits$\"dispersal\"[sp_i]\n    new_species[[sp_i]]$traits[ , \"temp_width\"] <- manual_traits$\"temp_width\"[sp_i]\n    # set species 1 start to island 1, species 2 to island 2, etc...\n    new_species[[sp_i]]$traits[ , \"start_island\"] <- unique(landscape$environment[pv==sp_i, \"patch\"]) # this is just a sanity check\n    # set species mean temp to the mean temp of the patches\n    new_species[[sp_i]]$traits[ , \"temp_niche_centre\"] <- mean(landscape$environment[pv==sp_i, \"mean_temp\"])\n  }\n  \n  return(new_species)\n}\n<environment: 0x00000158758e4698>\n\n\n$gen3sis$dispersal\n$gen3sis$dispersal$max_dispersal\n[1] Inf\n\n$gen3sis$dispersal$get_dispersal_values\nfunction(n, species, landscape, config){\n  values <- rexp(n, rate = 1/species$traits[,\"dispersal\"])\n  return(values)\n}\n<environment: 0x00000158758e4698>\n\n\n$gen3sis$speciation\n$gen3sis$speciation$divergence_threshold\n[1] 10\n\n$gen3sis$speciation$get_divergence_factor\nfunction(species, cluster_indices, landscape, config) {\n  return(1)\n}\n<environment: 0x00000158758e4698>\n\n\n$gen3sis$mutation\n$gen3sis$mutation$apply_evolution\nfunction(species, cluster_indices, landscape, config) {\n  # browser()\n  # cell names\n  trait_evolutionary_power <-0.01\n  traits <- species[[\"traits\"]]\n  cells <- rownames(traits)\n  #homogenize trait based on abundance\n  # Homogenize all traits by weighted abundance, attention, exclude here any trait that should be more neutral\n  trn <- config$gen3sis$general$trait_names # get trait names\n  trn <- trn[!trn %in% c(\"start_island\")] # exclude start_island\n  for(cluster_index in unique(cluster_indices)){\n    # cluster_index <- 1\n    cells_cluster <- cells[which(cluster_indices == cluster_index)]\n    # hist(traits[cells_cluster, \"temp\"], main=\"before\")\n    mean_abd <- mean(species$abundance[cells_cluster])\n    weight_abd <- species$abundance[cells_cluster]/mean_abd\n    for (ti in trn){\n      traits[cells_cluster, ti] <- mean(traits[cells_cluster, ti]*weight_abd)\n    }\n    # hist(traits[cells_cluster, \"temp\"], main=\"after\") # usefull to see spread\n  }\n  \n  # mutate mean temperature\n  mutation_deltas <-rnorm(length(traits[, ti]), mean=0, sd=trait_evolutionary_power)\n  traits[, \"temp_niche_centre\"] <- traits[, \"temp_niche_centre\"] + mutation_deltas\n  return(traits)\n}\n<bytecode: 0x00000158758c2dc8>\n<environment: 0x00000158758e4698>\n\n\n$gen3sis$ecology\n$gen3sis$ecology$apply_ecology\nfunction(abundance, traits, landscape, config) {\n  # get the difference between species and site mean temp\n  diff <- abs(traits[, \"temp_niche_centre\"]-landscape[,\"mean_temp\"])\n  # set the abundance of species with a difference in mean temp larger than the species temp width to zero and the ones below to one\n  abundance[diff>traits[,\"temp_width\"]] <- 0\n  abundance[diff<=traits[,\"temp_width\"]] <- 1\n  return(abundance)\n}\n<environment: 0x00000158758e4698>\n\n\n\n$user\nlist()\n\n$directories\n$directories$input\n[1] \"data/landscapes/islands\"\n\n$directories$output\n[1] \"output/islands/config_islands_simple_Day1Prac3_M1\"\n\n$directories$output_plots\n[1] \"output/islands/config_islands_simple_Day1Prac3_M1/plots\"\n\n\nattr(,\"class\")\n[1] \"gen3sis_config\"\n```\n:::\n:::\n\n\n#### Phylogeny object (phy.nex) {.unnumbered}\n\nThe phylogeny object is pretty straight forward. It is a nexus file containing the relationships between the species.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read phy\nphy <- read.nexus(file.path(output_dir, \"config_islands_simple_Day1Prac3_M1/phy.nex\"))\n\n# plot phy\nplot(phy)\n```\n\n::: {.cell-output-display}\n![](Day2_Prac4_outputs_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nFrom this object we can look at lineages through time plots and estimate trends in diversification, such as using the gamma statistic to detect diversification slowdowns or speedups.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot an ltt\nltt_M1 <-ltt(phy)\n```\n\n::: {.cell-output-display}\n![](Day2_Prac4_outputs_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# look at the gamma statistic\nprint(paste0(\"Gamma = \", round(ltt_M1$gamma, 2)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Gamma = -0.67\"\n```\n:::\n\n```{.r .cell-code}\n# is there a significant deviation from conatant rates?\nprint(paste0(\"P = \", round(ltt_M1$p, 2)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"P = 0.5\"\n```\n:::\n:::\n\n\n#### Species objects (phy.nex) {.unnumbered}\n\nNow its time to get into the meat of the gen3sis outputs. Most of the information from the simulation is stored in the species objects. These are .rds files that contain a list which includes information on every species, extinct or extant, that existed during the simulation. These are saved per default at every time step, but can be fine tuned according to your needs. The naming convention is \"species_t_0.rds\" for time step 0 (present-day), and \"species_t_50\" for timestep 50, etc.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load object\nspecies_t_0 <- readRDS(file.path(output_dir, \"config_islands_simple_Day1Prac3_M1\", \"species\", \"species_t_0.rds\"))\n\n# look at object class and length\nclass(species_t_0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"list\"\n```\n:::\n\n```{.r .cell-code}\nlength(species_t_0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n\n```{.r .cell-code}\n# compare to number of tips in the phylogeny\nNtip(phy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n\nThere are 14 elements in the list, representing our 14 species and this number matches the number of species in our phylogeny. No species went extinct in this particular simulation, but if they did, they would match extinct tips in the phylogeny.\n\nLets look at a single species\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(species_t_0[[1]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"id\"         \"abundance\"  \"traits\"     \"divergence\"\n```\n:::\n:::\n\n\nThe species has an ID which allows us to match it to the phylogeny.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspecies_t_0[[1]]$id\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\"\n```\n:::\n:::\n\n\nThe species' abundances are also linked to grid cells in the landscape, which can be matched with their corresponding names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspecies_t_0[[1]]$abundance\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n247 248 249 250 251 252 253 288 289 290 291 292 294 306 307 308 310 311 312 313 \n  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n314 315 316 317 318 348 349 351 352 353 354 355 363 364 365 366 367 376 377 378 \n  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n379 406 407 408 414 415 416 422 423 424 437 438 439 440 465 466 467 475 476 482 \n  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n483 500 501 524 525 526 536 537 542 559 560 561 584 585 597 602 618 619 620 621 \n  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n644 645 646 656 657 662 663 676 677 678 679 680 705 706 716 717 722 723 736 737 \n  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n738 765 766 767 775 776 777 783 784 785 786 794 795 796 797 827 829 834 835 836 \n  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n844 845 846 847 848 849 850 851 852 853 854 855 856 887 888 889 890 891 892 893 \n  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n894 895 906 907 908 909 910 911 912 913 949 950 951 952 953 \n  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n```\n:::\n:::\n\n\nIn this case the species has abundance values of 1 in all populations from the cells that it occupies. This is because we set abundances to be binary: 1=present, 0=absent. We can see the species occupies cells 2767,2768,2769, etc.\n\nThe species also has values of it's traits for each of its populations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(species_t_0[[1]]$traits)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    dispersal temp_niche_centre temp_width start_island\n247         5          20.84468          1            1\n248         5          20.82800          1            1\n249         5          20.83316          1            1\n250         5          20.83969          1            1\n251         5          20.82486          1            1\n252         5          20.83450          1            1\n```\n:::\n:::\n\n\nWe can see the population that each row is linked by the rownames. Here you can see 2767, 2768, 2769, etc. Each of these populations have a dispersal trait of 5 (because we didn't vary this) slightly different temp_mean traits (because these evolved stochastically under a Brownian motion model) and a temp width of 1 (again, we didn;t vary this in model 1).\n\nSo, if we want to map out the distribution of species 1 at timestep 0, we just need to link those cell names (267/268/etc) to the landscape object and make a raster. Why don;t we try and see what islands species 1 is found on.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(1,3))\n# first plot the islands out from the landscape object\npatch_xyz <- rast(lc$patch[,c(\"x\", \"y\", \"0\")], type=\"xyz\")\nplot(patch_xyz, main=\"Island Patches\", col=palette()[c(2,3,4,6)], colNA=\"#000033\")\n\n# pull out values of the landscape where the species is found\nspecies1_xyz <- lc$patch[which(rownames(lc$patch) %in% rownames(species_t_0[[1]]$traits)), c(\"x\", \"y\", \"0\")]\n\n# turn it into a raster\nspecies1_xyz <- rast(species1_xyz, type=\"xyz\")\nspecies1_xyz <- extend(species1_xyz, patch_xyz)\nplot(species1_xyz, main= \"Species 1 Distribution\", colNA=\"#000033\")\n\n# alternatively we can use the plot_species function on gen3sis..\n# for that we load the landscape object of the respective time-step\nlandscape_t_0 <- readRDS(file.path(output_dir, \"config_islands_simple_Day1Prac3_M1\", \"landscapes\", \"landscape_t_0.rds\"))\ngen3sis::plot_species_presence(species_t_0[[1]], landscape_t_0)\n```\n\n::: {.cell-output-display}\n![](Day2_Prac4_outputs_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n#### Linking the species object and phylogeny {.unnumbered}\n\nLets try and link the species trait data to the phylogeny to start learning something about what exactly took place during our simulation! Let's get the mean trait value of the temperature niche and also the islands that each species belongs too.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# lets create a data frame\ndaf <- data.frame(\"id\"= paste0(\"species\",sapply(species_t_0, function(x)x$id)),\n                 \"mean_temp\"=NA,\n                 \"island1\"=0,\n                 \"island2\"=0,\n                 \"island3\"=0,\n                 \"island4\"=0, \n                 \"island_start\"=NA)\n\n# take a look\nhead(daf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        id mean_temp island1 island2 island3 island4 island_start\n1 species1        NA       0       0       0       0           NA\n2 species2        NA       0       0       0       0           NA\n3 species3        NA       0       0       0       0           NA\n4 species4        NA       0       0       0       0           NA\n5 species5        NA       0       0       0       0           NA\n6 species6        NA       0       0       0       0           NA\n```\n:::\n\n```{.r .cell-code}\n# Use sapply on the species object to get their mean trait values\ndaf$mean_temp <- sapply(species_t_0, function(x){\n  # x <- species_t_0[[1]]\n  mean(x$traits[, \"temp_niche_centre\"], na.rm=T)\n  })\n\n# Get the island patch id values in a for loop\nfor(i in 1:length(species_t_0)){\n  #I'm here because it is a good idea to test code on a single species before running it on all species\n  # i <- 1 \n  # as before we get the lanscape values of each species\n  speciesi_xyz <- lc$patch[which(rownames(lc$patch) %in% rownames(species_t_0[[i]]$traits)), c(\"x\", \"y\", \"0\")]\n  \n  # then pull out the unique values (note that species might occur on more than one island)\n  islands <- unique(speciesi_xyz[, 3])\n  \n  # then if species are on the island, give that column a value of 1\n  \n  daf$island1[i] <- ifelse(1 %in% islands, 1, 0)\n  daf$island2[i] <- ifelse(2 %in% islands, 1, 0)\n  daf$island3[i] <- ifelse(3 %in% islands, 1, 0)\n  daf$island4[i] <- ifelse(4 %in% islands, 1, 0)\n}\n\n# get the starting island from the traits object since we recorded this in the initialization step\ndaf$island_start <- sapply(species_t_0, function(xasa) unique(xasa$traits[, \"start_island\"]))\n```\n:::\n\n\nNow look again at the data frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(daf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        id mean_temp island1 island2 island3 island4 island_start\n1 species1  20.82727       1       1       0       0            1\n2 species2  20.98489       1       1       0       0            2\n3 species3  21.09256       0       0       1       0            3\n4 species4  22.00088       0       0       0       1            4\n5 species5  20.97409       1       1       0       0            2\n6 species6  20.82458       1       1       0       0            1\n```\n:::\n:::\n\n\nPlot out the continuously evolving temperature niche trait\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a named vector for the log of the temperature niche trait\ntemp_niche <- daf$mean_temp\nnames(temp_niche) <- daf$id\n\n# plot it out with dots = trait\ndotTree(phy,temp_niche,ftype=\"i\")\n```\n\n::: {.cell-output-display}\n![](Day2_Prac4_outputs_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nNot much variation in that trait, due to the combined effects of trait homogenization and a low rate of change. Lets plot the tip states of the islands on the phylogeny using the phytools package\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# format each island\nformatIsland <- function(island, phy=phy, daf=daf){\n  islandf <- as.factor(daf[, island])\n  names(islandf) <- daf$id\n  islandmat<-to.matrix(islandf,levels(islandf))\n  islandmat<-islandmat[phy$tip.label,]\n  return(list(islandf, islandmat))\n}\n\n\nplotTree(phy,ftype=\"i\",offset=1,fsize=0.9, xlim=c(0, 75))\n\ntiplabels(pie=formatIsland(island=\"island1\", phy=phy, daf=daf)[[2]],piecol=palette()[c(8,2)],cex=0.6, adj=12+1)\ntiplabels(pie=formatIsland(island=\"island2\", phy=phy, daf=daf)[[2]],piecol=palette()[c(8,3)],cex=0.6, adj=12+3)\ntiplabels(pie=formatIsland(island=\"island3\", phy=phy, daf=daf)[[2]],piecol=palette()[c(8,4)],cex=0.6, adj=12+5)\ntiplabels(pie=formatIsland(island=\"island4\", phy=phy, daf=daf)[[2]],piecol=palette()[c(8,6)],cex=0.6, adj=12+7)\n```\n:::\n\n\nInteresting. What do you notice about the distribution of species on islands? Could you predict which island each lineage began on?\n\nWe actually know which islands each lineage started on because we recorded this as a trait (we could also look at the past species objects to figure this out but we have used a shortcut though the traits).\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(1,2))\nplotTree(phy,ftype=\"i\",offset=1,fsize=0.4, xlim=c(0, 75))\nmy_cex=1.2\ntiplabels(pie=formatIsland(island=\"island1\", phy=phy, daf=daf)[[2]],piecol=palette()[c(8,2)],cex=my_cex, adj=12+1)\ntiplabels(pie=formatIsland(island=\"island2\", phy=phy, daf=daf)[[2]],piecol=palette()[c(8,3)],cex=my_cex, adj=12+3)\ntiplabels(pie=formatIsland(island=\"island3\", phy=phy, daf=daf)[[2]],piecol=palette()[c(8,4)],cex=my_cex, adj=12+5)\ntiplabels(pie=formatIsland(island=\"island4\", phy=phy, daf=daf)[[2]],piecol=palette()[c(8,6)],cex=my_cex, adj=12+7)\n# add the starting island as a fifth colum\ntiplabels(pie=formatIsland(island=\"island_start\", phy=phy, daf=daf)[[2]],piecol=palette()[c(2,3,4,6)],cex=my_cex, adj=12+9)\n\n# add island plot\nplot(patch_xyz, main=\"Island Patches\", col=palette()[c(2,3,4,6)])\n```\n:::\n\n\nSo whats really apparent here is that the clade that originated on the green island has speciated allopatrically into the red island multiple times in the recent past. The same is true for the red clade, however the deeper divergence between species9 and species3 have had enough time to recolonize both islands.\n\n#### Linking the species object, landscape, and phylogeny\n\nCommon spatial biodiversity analyses link information measured at the species level to maps of their distribution in space using presence-absence matrices or PAMs. PAMs typically are data frame with each row representing a site, could be an island or could be a grid cell, and each column representing a species. Values of 1 are given if the species is present in the site, if not a value of 0 is given.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# grid cell level PAM\n\n# create an empty data frame with the dimensions of species x sites\nPAM <- data.frame(matrix(0, nrow=nrow(lc$elevation), ncol=length(species_t_0)))\n\n# given names to rows and columns\nrownames(PAM) <- rownames(lc$elevation)\ncolnames(PAM) <- paste0(\"species\", sapply(species_t_0, function(x)x$id))\n\n# loop over species and add value of 1 to all sites the species is present\nfor(i in 1:length(species_t_0)){\n  \n  PAM[which(rownames(PAM) %in% names(species_t_0[[i]]$abundance)), i] <- 1\n}\n\n# how does it look?\nprint(PAM[1:10, 1:10])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   species1 species2 species3 species4 species5 species6 species7 species8\n1         0        0        0        0        0        0        0        0\n2         0        0        0        0        0        0        0        0\n3         0        0        0        0        0        0        0        0\n4         0        0        0        0        0        0        0        0\n5         0        0        0        0        0        0        0        0\n6         0        0        0        0        0        0        0        0\n7         0        0        0        0        0        0        0        0\n8         0        0        0        0        0        0        0        0\n9         0        0        0        0        0        0        0        0\n10        0        0        0        0        0        0        0        0\n   species9 species10\n1         0         0\n2         0         0\n3         0         0\n4         0         0\n5         0         0\n6         0         0\n7         0         0\n8         0         0\n9         0         0\n10        0         0\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# we can estimate Phylogenetic diversity\npd_islands <- pd(PAM, phy)\n\n# we can also measure mean phylogenetic distance and mean nearest neighbour distance\nmpd_islands <- mpd(PAM, cophenetic(phy))\nmntd_islands <- mntd(PAM,cophenetic(phy))\n\n# link these back with the landscape by joining to the landscape lat/long\ncommunity_phylo <- cbind(lc$elevation[, c(\"x\", \"y\")], pd_islands, mpd_islands, mntd_islands)\n\npar(mfrow=c(2,2))\nsr_ras <- rast(community_phylo[, c(\"x\", \"y\", \"SR\")], type=\"xyz\")\npd_ras <- rast(community_phylo[, c(\"x\", \"y\", \"PD\")], type=\"xyz\")\nmpd_ras <- rast(community_phylo[, c(\"x\", \"y\", \"mpd_islands\")], type=\"xyz\")\nmntd_ras <- rast(community_phylo[, c(\"x\", \"y\", \"mntd_islands\")], type=\"xyz\")\n\nplot(sr_ras, main=\"Species Richness\", na.color =\"red\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in plot.window(...): \"na.color\" is not a graphical parameter\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in plot.xy(xy, type, ...): \"na.color\" is not a graphical parameter\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in title(...): \"na.color\" is not a graphical parameter\n```\n:::\n\n```{.r .cell-code}\nplot(pd_ras, main=\"Phylogenetic Diversity\")\nplot(mpd_ras, main=\"Mean Phylogenetic Pairwise Distance\")\nplot(mntd_ras, main= \"Mean Nearest Neighbour Phylogenetic Distance\")\n```\n\n::: {.cell-output-display}\n![](Day2_Prac4_outputs_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n## Sensitivity analysis {.unnumbered}\n\nIn this part we are going to load in a data set from Skeels et al. (2022) *SystBiol* in which we simulated data with Gen3sis under four alternative models to test the evolutionary speed hypothesis (ESH). The ESH hypothesizes that faster rates of evolution occurs in lineages from warm regions like the tropics because they are have higher mutagenesis from faster life histories associated with warm temperatures and smaller body sizes. The four models used there were\n\n-   M0 - the null. population divergence is independent of temperature and body size\n\n-   M1 - Temperature Trailblazer. environmental temperature drives rate of population divergence\n\n-   M2 - Size Shaper. body size drives the rate of population divergence\n\n-   M3 - Synergistic Drivers. environmental temperature and body size drives the rate of population divergence\n\n![Skeels et al. 2022 Syst. Biol. Figure 1](figures/systbiol_fig1.jpeg)\n\nNot only did we change the overall model of evolution, we also varied key parameters for rates of niche evolution (simga_squared_t), rates of body size evolution (sigma_squared_bs), dispersal, and the temperature niche breadth (omega), the exponent of the divergence factor with temp/body size (lambda), and the divergence threshold. Load in the data and take a look, the first 6 columns are the model parameters we varied.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim_data <- read.csv(\"data/simulated_summary_statistics.csv\")\n\n# look at the first few columns\nhead(sim_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  divergence_threshold lambda omega sigma_squared_bs sigma_squared_t dispersal\n1                    6  3.497 0.022            0.010           0.008     2.748\n2                    8  2.743 0.029            0.006           0.012     2.119\n3                    4  4.251 0.016            0.015           0.004     3.376\n4                    5  3.120 0.026            0.003           0.013     3.691\n5                    9  4.629 0.013            0.013           0.006     2.433\n6                    7  2.365 0.019            0.008           0.003     3.062\n   m n_extant_diversity richness_lat_cor richness_temp0mya_cor temp_skewness\n1 m0               3763       -0.5123028             0.4603989    -0.3377488\n2 m0               2514       -0.4425833             0.3879755    -0.4301348\n3 m0               2881       -0.6090030             0.5980889    -0.5485366\n4 m0               3259       -0.2692291             0.2709599    -0.4056149\n5 m0               1720       -0.6320276             0.5569583    -0.2034315\n6 m0               2040       -0.6901237             0.7143851    -0.5818263\n  temp_kurtosis rs_skewness rs_kurtosis bodysize_temp_cor\n1      2.404199    7.054563    70.57922      0.0001267958\n2      2.781235    7.065556    73.60686     -0.0573601538\n3      2.686734    6.568041    66.80411      0.0627634742\n4      2.578726    6.372164    56.40946     -0.0099951252\n5      2.039092    5.943670    62.21730     -0.0491801922\n6      2.692505    5.557220    43.19415     -0.1425113733\n  bodysize_rangesize_cor rangesize_temp_cor bodysize_MRDa_cor bodysize_MRDn_cor\n1           -0.021888162          0.3166909       -0.22987475       -0.22987475\n2           -0.004099039          0.3750050        0.11431674        0.11431674\n3           -0.007583409          0.1745926       -0.17385167       -0.17385167\n4            0.019477523          0.3315223        0.15882106        0.15882106\n5           -0.020735305          0.3106268       -0.01367189       -0.01367189\n6           -0.068035906          0.2386339       -0.25345879       -0.25345879\n  bodysize_MRDs_cor bodysize_ED_cor bodysize_ES_cor bodysize_DR_cor\n1       -0.22987475    -0.004220075    -0.001379360     0.004220206\n2        0.11431674    -0.048918445    -0.047336234     0.048918445\n3       -0.17385167     0.156214848     0.124189954    -0.156214848\n4        0.15882106     0.025569939     0.020867045    -0.025569939\n5       -0.01367189    -0.091018579    -0.071841554     0.091018579\n6       -0.25345879    -0.011839185    -0.009998883     0.011839185\n  temp_MRDa_cor temp_MRDn_cor temp_MRDs_cor temp_ED_cor temp_ES_cor temp_DR_cor\n1   -0.26576712   -0.26576712   -0.26576712  0.26183743   0.2202009 -0.26183732\n2   -0.17175772   -0.17175772   -0.17175772  0.24312164   0.2193826 -0.24312164\n3   -0.26126033   -0.26126033   -0.26126033  0.20306519   0.2015201 -0.20306519\n4   -0.18047283   -0.18047283   -0.18047283  0.09627562   0.0921575 -0.09627562\n5   -0.29855804   -0.29855804   -0.29855804  0.51772365   0.4230468 -0.51772365\n6    0.05847105    0.05847105    0.05847105  0.11024859   0.1080941 -0.11024859\n  rangesize_MRDa_cor rangesize_MRDn_cor rangesize_MRDs_cor rangesize_ED_cor\n1        -0.06934918        -0.06934918        -0.06934918       0.08511133\n2        -0.10091990        -0.10091990        -0.10091990       0.12507118\n3         0.04022504         0.04022504         0.04022504      -0.09452590\n4        -0.04660310        -0.04660310        -0.04660310       0.07933631\n5        -0.13259037        -0.13259037        -0.13259037       0.18191779\n6         0.06267093         0.06267093         0.06267093      -0.01025940\n  rangesize_ES_cor rangesize_DR_cor  collessI    sackinI     gamma  lat_pd_cor\n1      0.077434173      -0.08511127 1.2941150  1.2446979 -2.842964  0.31465895\n2      0.122658910      -0.12507118 0.2469526  0.3055442 -3.432895  0.25315279\n3     -0.069705157       0.09452590 1.7248814  1.6445494  3.552396  0.18284230\n4      0.087443271      -0.07933631 0.1092457 -0.1254847 -2.856134  0.11539323\n5      0.147346956      -0.18191779 1.9250034  1.8373325  1.221135 -0.06489522\n6      0.006120436       0.01025940 1.4952264  1.3605311 -5.120426  0.53662583\n  lat_mpd_cor lat_mntd_cor temp_pd_cor temp_mpd_cor temp_mntd_cor\n1  0.03036122   0.33145967 -0.24781657   0.01816540  -0.268472337\n2  0.10829373   0.24772423 -0.19630776  -0.09235074  -0.184665665\n3  0.18551711   0.24143456 -0.18427695  -0.19302604  -0.243213118\n4 -0.03477720   0.15145822 -0.09837927   0.03810852  -0.129764794\n5 -0.20454388   0.09798374  0.14050779   0.24629073  -0.006957113\n6  0.46224942   0.53924111 -0.54984407  -0.47923803  -0.551691573\n  richness_pd_cor richness_mpd_cor richness_mntd_cor temp_bsm_cor temp_bssd_cor\n1      -0.7653721      -0.41190740        -0.7499123   0.13029352    0.10296607\n2      -0.5019377      -0.13404370        -0.4901978   0.02405246    0.32276835\n3      -0.4206957      -0.37006059        -0.5361401   0.29116267    0.28959998\n4      -0.6620540      -0.41176821        -0.6769946  -0.05320780    0.04856645\n5      -0.1328847       0.06086838        -0.2905060  -0.08286640    0.08193951\n6      -0.8328187      -0.71895993        -0.8346579   0.31747185    0.34586235\n  richness_bsm_cor richness_bssd_cor   pd_bsm_cor mpd_bsm_cor mntd_bsm_cor\n1       0.11558582         0.2699839  0.003325102   0.2260060  -0.05039301\n2      -0.04537885         0.3499518 -0.263036186  -0.2484294  -0.25064129\n3       0.23668036         0.3628398  0.515713659   0.4795434   0.49672112\n4       0.04042515         0.1778522 -0.052266148  -0.1187109  -0.03605613\n5       0.31046985         0.3722813  0.061612978   0.1029425   0.06221910\n6       0.45747017         0.3837205 -0.038428520   0.3474728  -0.12562991\n```\n:::\n\n```{.r .cell-code}\n# look at the models\nunique(sim_data$m)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"m0\" \"m1\" \"m2\" \"m3\"\n```\n:::\n:::\n\n\nThis data set has 27 metrics used in our paper to measure patterns in the distribution of species, such as range size metrics, or correlations between temperature and diversity, as well as phylogenetic tree shape metrics, such as gamma, and measures of functional diversity, like body size variance. We predicted that these different models of evolution (M0-M4) should leave discernible signatures in these metrics. We can plot a few associations between biodiversity metrics and these model parameters to test this hypothesis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(ggplot2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: ggplot2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.2.3\n```\n:::\n\n```{.r .cell-code}\n# how is diversity related to the dispersal ability of a clade?\nggplot(sim_data, aes(x=m, y=log(n_extant_diversity), fill=m))+\n  geom_point(alpha=0.7, position = \"jitter\")+\n  geom_boxplot(alpha=0.7)+\n  stat_smooth()+\n  theme_classic()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](Day2_Prac4_outputs_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# how about the temperature~diversity gradient?\nggplot(sim_data, aes(x=m, y=richness_temp0mya_cor, fill=m))+\n  geom_point(alpha=0.7, position = \"jitter\")+\n  geom_boxplot(alpha=0.7)+\n  stat_smooth()+\n  theme_classic()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](Day2_Prac4_outputs_files/figure-html/unnamed-chunk-25-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# how about the relationship between  body size and diversification rate?\nggplot(sim_data, aes(x=m, y=bodysize_DR_cor, fill=m))+\n  geom_point(alpha=0.7, position = \"jitter\")+\n  geom_boxplot(alpha=0.7)+\n  stat_smooth()+\n  theme_classic()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](Day2_Prac4_outputs_files/figure-html/unnamed-chunk-25-3.png){width=672}\n:::\n\n```{.r .cell-code}\n# how about the relationship between temperature and diversification rate?\nggplot(sim_data, aes(x=m, y=temp_DR_cor, fill=m))+\n  geom_point(alpha=0.7, position = \"jitter\")+\n  geom_boxplot(alpha=0.7)+\n  stat_smooth()+\n  theme_classic()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](Day2_Prac4_outputs_files/figure-html/unnamed-chunk-25-4.png){width=672}\n:::\n:::\n\n\nDo these patterns fit our predictions? We can also look at how some of these metrics varied with the continuous model parameters such as dispersal ability.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# how is diversity related to the dispersal ability of a clade?\nggplot(sim_data, aes(x=dispersal, y=log(n_extant_diversity)))+\n  geom_point(alpha=0.7)+\n  stat_smooth()+\n  theme_classic()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output-display}\n![](Day2_Prac4_outputs_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# how about the latitude diversity gradient?\nggplot(sim_data, aes(x=dispersal, y=temp_DR_cor))+\n  geom_point(alpha=0.7)+\n  stat_smooth()+\n  theme_classic()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output-display}\n![](Day2_Prac4_outputs_files/figure-html/unnamed-chunk-26-2.png){width=672}\n:::\n:::\n\n\nTo perform a simple kind of sensitivity test we might ask how each of the model parameters predicts linear changes in the distribution of a biodiversity patterns using a multiple regression model. One example where we have a good idea of what the relationship should be is the how variance in the distribution of temperature niches across species (e.g., skewness of the distribution) relates to model paramaters. We expect that this should scale with the rate of rate of temperature niche evolution - faster rates of change = more variation in the trait = more kutosis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# first scale parameters to be in the same units\nsim_data_scaled <- sim_data\nsim_data_scaled[,1:6] <- scale(sim_data_scaled[,1:6] )\n\n# fit the multiple regression\nlm1  <- lm(temp_kurtosis ~ divergence_threshold+lambda+omega+sigma_squared_bs+sigma_squared_t+dispersal, data=sim_data_scaled)\n\n# look at model coefficients\nsummary(lm1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = temp_kurtosis ~ divergence_threshold + lambda + \n    omega + sigma_squared_bs + sigma_squared_t + dispersal, data = sim_data_scaled)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2.7214 -0.7281 -0.3103  0.2481 22.9740 \n\nCoefficients:\n                     Estimate Std. Error t value Pr(>|t|)    \n(Intercept)           3.26301    0.04670  69.872  < 2e-16 ***\ndivergence_threshold  0.48515    0.04978   9.745  < 2e-16 ***\nlambda                0.22304    0.04717   4.729 2.49e-06 ***\nomega                 0.07447    0.04769   1.562    0.119    \nsigma_squared_bs      0.02415    0.04677   0.516    0.606    \nsigma_squared_t       0.29197    0.04690   6.225 6.37e-10 ***\ndispersal             0.26180    0.04915   5.326 1.17e-07 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.737 on 1377 degrees of freedom\nMultiple R-squared:  0.1076,\tAdjusted R-squared:  0.1037 \nF-statistic: 27.68 on 6 and 1377 DF,  p-value: < 2.2e-16\n```\n:::\n:::\n\n\nWhat do you see? Are our expectations met? Any surprises? Let's try a few other biodiversity patterns where the predictions are less clear.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# fit the multiple regressions\n\n# Gamma statsitic for phylogenetic tree shape\nlm2  <- lm(gamma ~ divergence_threshold+lambda+omega+sigma_squared_bs+sigma_squared_t+dispersal, data=sim_data_scaled)\n\n# skewness of the range size distribution of species\nlm3  <- lm(rs_skewness ~ divergence_threshold+lambda+omega+sigma_squared_bs+sigma_squared_t+dispersal, data=sim_data_scaled)\n\n# correlation between species range sizes and temperature\nlm4  <- lm(rangesize_temp_cor ~ divergence_threshold+lambda+omega+sigma_squared_bs+sigma_squared_t+dispersal, data=sim_data_scaled)\n\n# look at model coefficients\nsummary(lm2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = gamma ~ divergence_threshold + lambda + omega + \n    sigma_squared_bs + sigma_squared_t + dispersal, data = sim_data_scaled)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-14.6901  -3.3262  -0.3125   3.0625  19.1039 \n\nCoefficients:\n                     Estimate Std. Error t value Pr(>|t|)    \n(Intercept)           1.58975    0.13209  12.035  < 2e-16 ***\ndivergence_threshold -1.67245    0.14081 -11.877  < 2e-16 ***\nlambda               -0.36850    0.13341  -2.762  0.00582 ** \nomega                 1.13745    0.13489   8.432  < 2e-16 ***\nsigma_squared_bs      0.04682    0.13230   0.354  0.72347    \nsigma_squared_t      -0.17454    0.13266  -1.316  0.18848    \ndispersal             0.99940    0.13903   7.188 1.07e-12 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.914 on 1377 degrees of freedom\nMultiple R-squared:  0.2175,\tAdjusted R-squared:  0.2141 \nF-statistic: 63.78 on 6 and 1377 DF,  p-value: < 2.2e-16\n```\n:::\n\n```{.r .cell-code}\nsummary(lm3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = rs_skewness ~ divergence_threshold + lambda + omega + \n    sigma_squared_bs + sigma_squared_t + dispersal, data = sim_data_scaled)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-5.5219 -1.7186 -0.2771  1.3923 21.2181 \n\nCoefficients:\n                     Estimate Std. Error t value Pr(>|t|)    \n(Intercept)           6.14631    0.06701  91.717  < 2e-16 ***\ndivergence_threshold -2.11448    0.07144 -29.598  < 2e-16 ***\nlambda               -0.60219    0.06768  -8.897  < 2e-16 ***\nomega                -0.31157    0.06844  -4.553 5.76e-06 ***\nsigma_squared_bs      0.22387    0.06712   3.335 0.000875 ***\nsigma_squared_t      -0.57043    0.06730  -8.476  < 2e-16 ***\ndispersal            -1.33498    0.07053 -18.927  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.493 on 1377 degrees of freedom\nMultiple R-squared:  0.4552,\tAdjusted R-squared:  0.4528 \nF-statistic: 191.8 on 6 and 1377 DF,  p-value: < 2.2e-16\n```\n:::\n\n```{.r .cell-code}\nsummary(lm4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = rangesize_temp_cor ~ divergence_threshold + lambda + \n    omega + sigma_squared_bs + sigma_squared_t + dispersal, data = sim_data_scaled)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.72559 -0.08895  0.01488  0.09329  0.68488 \n\nCoefficients:\n                      Estimate Std. Error t value Pr(>|t|)    \n(Intercept)           0.197748   0.004238  46.658  < 2e-16 ***\ndivergence_threshold -0.029361   0.004518  -6.498 1.13e-10 ***\nlambda               -0.022882   0.004281  -5.345 1.05e-07 ***\nomega                -0.042760   0.004328  -9.879  < 2e-16 ***\nsigma_squared_bs     -0.001199   0.004245  -0.283    0.778    \nsigma_squared_t       0.041124   0.004256   9.662  < 2e-16 ***\ndispersal            -0.019362   0.004461  -4.340 1.53e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.1577 on 1377 degrees of freedom\nMultiple R-squared:  0.1388,\tAdjusted R-squared:  0.135 \nF-statistic: 36.99 on 6 and 1377 DF,  p-value: < 2.2e-16\n```\n:::\n:::\n\n\nIn all these cases there are interesting associations between model parameters and the biodiversity metrics. However, look at the R-squared values and what do you find? They are highly variable and in some cases quite low. This means that lots of variance in these biodiversity metrics are not explained by a linear combination of our model parameters. This is important when interpreting the effect. There are other ways of inferring more complex relationships between model parameters and biodiversity metrics, such as by including quadratic effects, exploring interaction terms, fitting non-linear models such as generalised additive models (GAMs), or even using machine learning methods such as neural networks which allow for highly-dimension non-linear effects. We won't cover these today but they are all useful options to explore during sensitivity analysis.\n\n### Model Selection\n\nOnce we have established that some biodiversity metrics showed predictable relationships with model parameters or the generative model (e.g., M0-M4) we can use these metrics to perform model selection on empirical data. Here we are using the match between observed biodiversity patterns and simulated biodiversity patterns, to ask which model might be most likely to have generated the real patterns.\n\n![Skeels et al. 2022 Syst. Biol. Figure 2](figures/systbiol_fig2.jpeg)\n\nTo do this we are going to perform a linear discriminant analysis which is a classification tool that can fit fit fairly quickly compared to some of the other models. We want to validate how well the model performs so we will perform a 10-fold cross validation repeated 10 times. Here we train the model on a subset of the data, repeating the process and optimising the predictive capacity. Then we predict how good a job our classifier is on a witheld portion of the data (test data). If the model performs well we should be able to accurately predict what models generated what biodiversity metrics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(caret)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: caret\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'caret'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:vegan':\n\n    tolerance\n```\n:::\n\n```{.r .cell-code}\n# get just the biodiversity metrics\nsim_data_ms <- sim_data[,7:ncol(sim_data)]\n\n# remove MRDs variables from sim data\nsim_data_ms <- sim_data_ms[, -which(grepl(\"MRDs\",colnames(sim_data_ms)))]\n\n# partition into a training and testing dataset for cross validation\ntrain_index <- createDataPartition(sim_data_ms$m, p = .66, list = FALSE,  times = 1)\ntrain_data <- sim_data_ms[ train_index ,]\ntest_data  <- sim_data_ms[-train_index ,]\n\n# preprocess values - we will scale and center values\npreprocessed_values <- preProcess(train_data, method = c(\"center\", \"scale\"))\ntrain_transformed   <- predict(preprocessed_values, train_data)\ntest_transformed    <- predict(preprocessed_values, test_data )\n\n# configure the cross-validation paramaters\ntrain_control <- trainControl( method = \"repeatedcv\", number = 10, repeats = 10, classProbs = TRUE, savePredictions = TRUE)\n\n# FIT MODELS\nf1 <- formula(paste(\"m ~ \", paste(names(sim_data_ms)[2:c(length(names(sim_data_ms)))], collapse=\" + \")))\n\n## LINEAR DISCRIMINANT ANALYSIS\n# note we'll run an LDA because they're quick - many other kinds of models to choose from \nlda_train        <- train(f1, data=train_transformed, method = \"lda\", trControl = train_control, verbose = T)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n\nWarning in lda.default(x, grouping, ...): variables are collinear\n```\n:::\n\n```{.r .cell-code}\n#predict on test data\nlda_test        <- predict(lda_train, test_transformed)\n\n# classification accuracy\nlda_cm        <- confusionMatrix(data = lda_test, reference = as.factor(test_transformed$m), mode = \"prec_recall\")\n\n# how well did the model perform\nlda_cm \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction m0 m1 m2 m3\n        m0 97 23  3  5\n        m1  7 85  3  6\n        m2  2  2 83 26\n        m3 11  6 28 80\n\nOverall Statistics\n                                          \n               Accuracy : 0.7388          \n                 95% CI : (0.6964, 0.7781)\n    No Information Rate : 0.2505          \n    P-Value [Acc > NIR] : < 2e-16         \n                                          \n                  Kappa : 0.6516          \n                                          \n Mcnemar's Test P-Value : 0.08074         \n\nStatistics by Class:\n\n                     Class: m0 Class: m1 Class: m2 Class: m3\nPrecision               0.7578    0.8416    0.7345    0.6400\nRecall                  0.8291    0.7328    0.7094    0.6838\nF1                      0.7918    0.7834    0.7217    0.6612\nPrevalence              0.2505    0.2484    0.2505    0.2505\nDetection Rate          0.2077    0.1820    0.1777    0.1713\nDetection Prevalence    0.2741    0.2163    0.2420    0.2677\nBalanced Accuracy       0.8702    0.8436    0.8118    0.7776\n```\n:::\n:::\n\n\nWhats the overall accuracy? Are some models predicted better than others?\n\nNow we'll use this model to predict the possible model of diversification in orders of terrestrial vertebrates.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# first subset and clean the colnames of the empirical data\nempirical_data <- read.csv(\"data/order_empirical_summary_statistics.csv\")\n\n# just want to look at diverse clades\nempirical_data <- na.omit(empirical_data[which(empirical_data$n_species >= 20),])\n\n# make labels lower case\nempirical_data$taxon <- tolower(empirical_data$taxon)\n\n# clean up a few names because I'm a grub\ncolnames(empirical_data)[which(colnames(empirical_data) == \"taxon\")] <- \"m\"\ncolnames(empirical_data)[which(colnames(empirical_data)==\"rs_kutosis\")] <- \"rs_kurtosis\"\ncolnames(empirical_data)[which(colnames(empirical_data)==\"n_species\")] <- \"n_extant_diversity\"\ncolnames(empirical_data) <- gsub(\"_p_cor\", \"_cor\",colnames(empirical_data)) # change _p_cor for posterior samplescould also change _m_cor to use MCC samples\ncolnames(empirical_data) <- gsub(\"DivRate\", \"DR\",colnames(empirical_data))\ncolnames(empirical_data)[which(colnames(empirical_data) == \"taxon\")] <- \"m\"\ncolnames(empirical_data)[which(colnames(empirical_data) == \"collessI_posterior\")] <- \"collessI\"\ncolnames(empirical_data)[which(colnames(empirical_data) == \"sackinI_mcc\")] <- \"sackinI\"\ncolnames(empirical_data)[which(colnames(empirical_data) == \"gamma_mcc\")] <- \"gamma\"\n\n\n# ok these should be able to be matched now\nempirical_data <- empirical_data[, which(colnames(empirical_data) %in% colnames(sim_data_ms))]\nempirical_subset <- empirical_data[, match(colnames(sim_data_ms), colnames(empirical_data))]\n\n# check names match\ncolnames(sim_data_ms)[which(!colnames(sim_data_ms) %in% colnames(empirical_subset))]\ncolnames(empirical_subset)[which(!colnames(empirical_subset) %in% colnames(sim_data_ms))]\ncolnames(empirical_subset) == colnames(sim_data_ms)\n\n# Process empirical data in the same way as for the simulated data\nsimulated_transformed <- predict(preprocessed_values, sim_data_ms )\nempirical_transformed <- predict(preprocessed_values, empirical_subset )\n\nmodel_set <- list(lda_train)\n\n# predict on empirical\nclass_predictions   <- predict(model_set, newdata = empirical_transformed, type = \"raw\", na.action = na.omit)\nclass_probabilities <- predict(model_set, newdata = empirical_transformed, type = \"prob\", na.action = na.omit)\n\n# sum the classes\ncolSums(do.call(rbind, class_prediction_table)) # TODO define class prediction table\n\n# now we can see which model is the most supported for each order\ncbind(empirical_transformed$m, as.character(class_predictions[[1]]))\n\ntable(class_predictions[[1]])\n\n# can also look at the variation in this\ncbind(empirical_transformed$m, round(class_probabilities[[1]], 3))\n```\n:::\n\n\nWhat patterns do you see? Which models are the most supported?\n",
    "supporting": [
      "Day2_Prac4_outputs_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "53999c31f7a4b5cdba2461ccaab88cdc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Config Basics\"\nexecute: \n  eval: FALSE\n---\n\n\nTo begin the dive into what Gen3sis is, and how it operates, we'll start by looking a config file. The config is the code for the ecological and evolutionary rules and other parameters of Gen3sis, such as the random see, instructions on saving output, etc.\n\nA config file is a a stand-alone R script which is modified by you. We can generate a new blank config file automatically to specified location in your configs folder and open it in R. Give that try.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_config_skeleton(\"configs/blank_config\")\n```\n:::\n\n\nOnce you've got the hang of Gen3sis it's straightforward to populate these with functions. However, for now, lets start with the config we used in the previous section. We should still have that config loaded in our workspaces, but if not run this code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfig_dir <- \"configs/SouthAmerica\"\nconfig <- create_input_config(config_file = file.path(config_dir, \"config_southamerica.R\"))\n```\n:::\n\n\nlets take a look at the config\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfig\n```\n:::\n\n\nOh boy, that's intimidating. But, don't stress, we'll go through it piece by piece and learn what each bit is doing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(config)\nnames(config)\n```\n:::\n\n\nWe can see that the config is a list with 3 components: 1. gen3sis, 2. user, 3. directories. For now, we'll focus on gen3sis which is the meat of the config. This 'gen3sis' element itself is a list of 6 elements: 'general', 'initialization', 'dispersal', 'speciation','mutation', and 'ecology'.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(config$gen3sis)\n```\n:::\n\n\n# General {.unnumbered}\n\nThe first element, 'general', sets up some important global parameters of the model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfig$gen3sis$general\n```\n:::\n\n\nThe random seed determines the starting point for random number generators in R. Because the simulations have stochastic processes, to reproduce a result, we need to have the same random seed, so by fixing it in a simulation, we can ensure we will get the exact same results next time we run the sim. Let's change the seed to 777.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfig$gen3sis$general$random_seed\n\nconfig$gen3sis$general$random_seed <- 777\n```\n:::\n\n\nThe start time is the time-step of the landscape file which the simulation will start at. We saw in the previous chapter that the South American landscape file had 65 time-steps, but we actually only started our simulation at time-step 20, or 20 time-steps before the final one. Each time-step in the landscape is 1 million years apart, so the timestep 20 is 20 million years ago. However, if the landscape units were in 100 thousand years, then time-step 20 would be 2 million years ago. Let's run the next simulation from an older timepoint, lets say the start of the Oligocene, 34 Ma.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfig$gen3sis$general$start_time\n\nconfig$gen3sis$general$start_time <- 34\n```\n:::\n\n\nOur simulation ran from 20 Ma to the present-day. However, we may wish for the simulation to finish before the present-day, for example just the Oligocene period 34Ma - 23Ma. To do this we can change the 'end_time'. When left as NA, the simulation will run to the final time-step. So let's change that to 23 Ma.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfig$gen3sis$general$end_time\n\nconfig$gen3sis$general$end_time <- 23\n```\n:::\n\n\n#Initialization {.unnumbered} The first step of any simulation is to populate your landscape with one or more species and assign them traits. This includes geographic distribution, types of traits to be implemented, and values for those traits. Every species in the simulation is stored in a list and consists of an ID, their abundance, trait values, and intraspecies divergence values.\n\n# Dispersal (migration) {.unnumbered}\n\nHow species disperse across the landscape is determined by simulated migration events between habitable cells. The range and behaviour of these events is set by users and can be based on fixed values, draws from probability distributions, species trait values, or anything else thought up by users.\n\n# Speciation (population divergence) {.unnumbered}\n\nThe speciation function determines how you want new species to form. This is based on a divergence counter and speciation threshold. Once two clusters within a species diverge enough to reach the speciation threshold, a new species forms. How the counter behaves is entirely up to users!\n\n# Mutation (trait evolution) {.unnumbered}\n\nEach species can have traits set by users. This function provides the opportunity to modify or \"mutate\" these traits with each time step in the simulation. How these traits change (or not) is entirely customisable.\n\n# Ecology (interactions) {.unnumbered}\n\nEvery species present in a cell across the landscape has an abundance value representing the population size of the species in that location. The ecology function allows users to modify this abundance value based on environmental values, species interactions, or anything else relevant to the study. An abundance of 0 leads to the extinction of the species in that cell.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noutput_dir <- \"output/SouthAmerica\"\nsim <- readRDS(file.path(output_dir, \"config_southamerica/sgen3sis.rds\"))\nnames(sim)\n\n\n\n#### Visualize --------------- \n#the outputs\nplot_summary(sim)\n\n# using raster package\nplot(rasterFromXYZ(sim$summary$`richness-final`))\n\nplot(rasterFromXYZ(sim$summary$`richness-final`), col=gen3sis::color_richness(10))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot diversity at 3 time slices\ntimesteps <- c(40, 20, 0)\npar(mfrow = c(1, 3))\nfor (i in timesteps) {\n  landscape_i <- readRDS(file.path(output_dir, paste0(\"config_southamerica/landscapes/landscape_t_\", \n                                                    i, \".rds\")))\n  species_i <- readRDS(file.path(output_dir, paste0(\"config_southamerica/species/species_t_\", \n                                                  i, \".rds\")))\n  plot_richness(species_i, landscape_i)\n}\ndev.off()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
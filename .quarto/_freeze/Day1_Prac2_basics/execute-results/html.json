{
  "hash": "03e22693b951521d71d0c55864602262",
  "result": {
    "markdown": "---\ntitle: \"⛸️ Configure Skating\"\nauthor: \"Alex Skeels and Oskar Hagen\"\nexecute: \n  eval: TRUE\n---\n\n\nTo begin the dive into what Gen3sis is, and how it operates, we'll start by looking a config file. The config is the code for the ecological and evolutionary rules and other parameters of Gen3sis, such as the random seed, instructions on saving output.\n\nA config file is a a stand-alone R script which is modified by you. You can modify a config in two ways. The first way and most practical, is to open up a config.R file. For example you can navigate to the folder open the file, or you can use this line and it should appear in your RStudio window.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfile.edit('configs/config_southamerica_Day1_Prac1.R')\n```\n:::\n\n\nAlternatively you can load a config into the RAM and modify there. We'll do this now as its a bit easier to demonstrate, but you can do a local copy of the config file and modify it directly. Lets start with the config we used in the previous section. We should still have that config loaded in our workspaces, but if not run this code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gen3sis)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'gen3sis' was built under R version 4.2.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe legacy packages maptools, rgdal, and rgeos, underpinning the sp package,\nwhich was just loaded, will retire in October 2023.\nPlease refer to R-spatial evolution reports for details, especially\nhttps://r-spatial.org/r/2023/05/15/evolution4.html.\nIt may be desirable to make the sf package available;\npackage maintainers should consider adding sf to Suggests:.\nThe sp package is now running under evolution status 2\n     (status 2 uses the sf package in place of rgdal)\n```\n:::\n\n```{.r .cell-code}\nconfig <- create_input_config(config_file = \"configs/config_southamerica_Day1_Prac1.R\")\n```\n:::\n\n\nSo these two ways of editing the config lend themselves to two different ways of running the config. We can either point the *run_simulation* function to the config file or the config stored in memory.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# DON'T RUN\n\n# run from config file\nsim <- run_simulation(config = file.path(\"configs\", \"config_southamerica_Day1Prac1.R\"), \n               landscape = file.path(\"data\",\"landscapes\", \"SA_coarse\"),\n               output_directory = \"output/SouthAmerica\",\n               verbose=1)\n\n# run from config in memory\nsim <- run_simulation(config = config, \n               landscape = file.path(\"data\",\"landscapes\", \"SA_coarse\"),\n               output_directory = \"output/SouthAmerica\",\n               verbose=1)\n```\n:::\n\n\nThis isn't that important for now but we are just flagging it for future reference.\n\nSo lets take a look at the config.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfig\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$gen3sis\n$gen3sis$general\n$gen3sis$general$random_seed\n[1] NA\n\n$gen3sis$general$start_time\n[1] NA\n\n$gen3sis$general$end_time\n[1] NA\n\n$gen3sis$general$max_number_of_species\n[1] NA\n\n$gen3sis$general$max_number_of_coexisting_species\n[1] NA\n\n$gen3sis$general$end_of_timestep_observer\nfunction (...) \n{\n}\n<bytecode: 0x00000198abbd29c8>\n<environment: 0x00000198abbd3218>\n\n$gen3sis$general$trait_names\nlist()\n\n$gen3sis$general$environmental_ranges\nlist()\n\n$gen3sis$general$verbose\n[1] FALSE\n\n\n$gen3sis$initialization\n$gen3sis$initialization$initial_abundance\nNULL\n\n$gen3sis$initialization$create_ancestor_species\nNULL\n\n\n$gen3sis$dispersal\n$gen3sis$dispersal$max_dispersal\n[1] Inf\n\n$gen3sis$dispersal$get_dispersal_values\nNULL\n\n\n$gen3sis$speciation\n$gen3sis$speciation$divergence_threshold\nNULL\n\n$gen3sis$speciation$get_divergence_factor\nNULL\n\n\n$gen3sis$mutation\n$gen3sis$mutation$apply_evolution\nNULL\n\n\n$gen3sis$ecology\n$gen3sis$ecology$apply_ecology\nNULL\n\n\n\n$user\nlist()\n\n$directories\nlist()\n\nattr(,\"class\")\n[1] \"gen3sis_config\"\n```\n:::\n:::\n\n\nOh boy, that's intimidating. But, don't stress, we'll go through it piece by piece and learn what each bit is doing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(config)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 3\n $ gen3sis    :List of 6\n  ..$ general       :List of 9\n  .. ..$ random_seed                     : logi NA\n  .. ..$ start_time                      : logi NA\n  .. ..$ end_time                        : logi NA\n  .. ..$ max_number_of_species           : logi NA\n  .. ..$ max_number_of_coexisting_species: logi NA\n  .. ..$ end_of_timestep_observer        :function (...)  \n  .. ..$ trait_names                     : list()\n  .. ..$ environmental_ranges            : list()\n  .. ..$ verbose                         : logi FALSE\n  ..$ initialization:List of 2\n  .. ..$ initial_abundance      : NULL\n  .. ..$ create_ancestor_species: NULL\n  ..$ dispersal     :List of 2\n  .. ..$ max_dispersal       : num Inf\n  .. ..$ get_dispersal_values: NULL\n  ..$ speciation    :List of 2\n  .. ..$ divergence_threshold : NULL\n  .. ..$ get_divergence_factor: NULL\n  ..$ mutation      :List of 1\n  .. ..$ apply_evolution: NULL\n  ..$ ecology       :List of 1\n  .. ..$ apply_ecology: NULL\n $ user       : list()\n $ directories: list()\n - attr(*, \"class\")= chr \"gen3sis_config\"\n```\n:::\n\n```{.r .cell-code}\nnames(config)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"gen3sis\"     \"user\"        \"directories\"\n```\n:::\n:::\n\n\nWe can see that the config is a list with 3 components: 1. gen3sis, 2. user, 3. directories. For now, we'll focus on gen3sis which is the meat of the config. This 'gen3sis' element itself is a list of 6 elements: 'general', 'initialization', 'dispersal', 'speciation','mutation', and 'ecology'.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(config$gen3sis)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"general\"        \"initialization\" \"dispersal\"      \"speciation\"    \n[5] \"mutation\"       \"ecology\"       \n```\n:::\n:::\n\n\n## General {.unnumbered}\n\nThe first element, 'general', sets up some important global parameters of the model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfig$gen3sis$general\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$random_seed\n[1] NA\n\n$start_time\n[1] NA\n\n$end_time\n[1] NA\n\n$max_number_of_species\n[1] NA\n\n$max_number_of_coexisting_species\n[1] NA\n\n$end_of_timestep_observer\nfunction (...) \n{\n}\n<bytecode: 0x00000198abbd29c8>\n<environment: 0x00000198abbd3218>\n\n$trait_names\nlist()\n\n$environmental_ranges\nlist()\n\n$verbose\n[1] FALSE\n```\n:::\n:::\n\n\nThe random seed determines the starting point for random number generators in R. Because the simulations have stochastic processes, to reproduce a result, we need to have the same random seed, so by fixing it in a simulation, we can ensure we will get the exact same results next time we run the sim. Let's change the seed to 777.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfig$gen3sis$general$random_seed\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nconfig$gen3sis$general$random_seed <- 777\n```\n:::\n\n\nThe start time is the time-step of the landscape file which the simulation will start at. We saw in the previous chapter that the South American landscape file had 65 time-steps, but we actually only started our simulation at time-step 20, or 20 time-steps before the final one. Each time-step in the landscape is 1 million years apart, so the timestep 20 is 20 million years ago. However, if the landscape units were in 100 thousand years, then time-step 20 would be 2 million years ago. Let's run the next simulation from an older timepoint, lets say the start of the Oligocene, 34 Ma.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfig$gen3sis$general$start_time\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nconfig$gen3sis$general$start_time <- 34\n```\n:::\n\n\nOur simulation ran from 20 Ma to the present-day. However, we may wish for the simulation to finish before the present-day, for example just the Oligocene period 34Ma - 23Ma. To do this we can change the 'end_time'. When left as NA, the simulation will run to the final time-step. So let's change that to 23 Ma.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfig$gen3sis$general$end_time\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nconfig$gen3sis$general$end_time <- 23\n```\n:::\n\n\nOther general settings include setting the maximum number of species in simulation, and in each grid cell before the simulation terminates (*max_number_of_species*, *max_number_of_coexisting_species*) which is a good way of aborting simulations before they get unwieldy, the names of the traits that each species will have in the simulation (*trait_names*), and the range of the environmental data (*environmental_ranges*). We'll these as is for now.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfig$gen3sis$general$max_number_of_species\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nconfig$gen3sis$general$max_number_of_coexisting_species\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nconfig$gen3sis$general$trait_names\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlist()\n```\n:::\n\n```{.r .cell-code}\nconfig$gen3sis$general$environmental_ranges\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlist()\n```\n:::\n:::\n\n\nLast but not least in the general setting is the oberserver function. At each time step in the simulation, users have the option to save different outputs and make different plots. The *species* object contains a list, where each element is a species. The *species* has information on the occupancy, abundance, and trait values of populations of that species in all inhabited grid cells. The *phylogeny* object contains information on the relatedness of all species to each other.\n\nMost of the biodiversity infromation we simulate is contained in *species* objects and *phylogeny* objects so we will save these at each timestep. We will also plot species richness as a way of visualizing how the simulation proceeds.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfig$gen3sis$general$end_of_timestep_observer = function(data, vars, config){\n    save_species()\n    save_phylogeny()\n  \n  # plotting function example:\n    plot_richness(data$all_species, data$landscape)\n}\n```\n:::\n\n\n## Initialization {.unnumbered}\n\nInitialization lets us define the number, abundance, location, and traits of the ancestral species. **This is what you start the simulation with**. You may want to start with a single species, so the simulation follows the diversification of single monophyletic radiation. Alternatively, you may seed the landscape with many species and this is also possible. Each species must be given the locations in which they will occur, in the form of characters matching the grid cell identifiers, and values for the traits we named in the general settings.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfig$gen3sis$initialization\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$initial_abundance\nNULL\n\n$create_ancestor_species\nNULL\n```\n:::\n:::\n\n\nIn this example, we are generating five species to begin. We first define a box from which we sample points to use to place the first species on the landscape. We randomly sample a single grid cell to place each initial species in. Next, we give each initial species values for the three traits. Here, we give the value for *temp* as the temperature value of the grid cell the species will occur in. We set a *dispersal* equal to 1. We repeat this 5 times, for 5 species. We can create more ancestor species by repeating this process in a loop , or we could manually create ancestral range by hand-selecting grid cells for the species to occur in.\n\n## Dispersal (migration) {.unnumbered}\n\nHow species disperse across the landscape is determined by simulated migration events between habitable cells. The range and behaviour of these events is set by users and can be based on fixed values, draws from probability distributions, species trait values, or anything else thought up by users.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfig$gen3sis$dispersal\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$max_dispersal\n[1] Inf\n\n$get_dispersal_values\nNULL\n```\n:::\n:::\n\n\nHere we set the maximum dispersal distance as infinty (e.g., no maximum), and we draw the dispersal values from a Weibull distribution with shape parameter = 1.5 and scale = 133. We can see what this distribution looks like by plotting a histogram.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(rweibull(1000, 1.5, 133), main= \"Weibull Distribution 1\", xlab=\"Dispersal Distance (km)\")\n```\n\n::: {.cell-output-display}\n![](Day1_Prac2_basics_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nYou can see the dispersal kernel is skewed around the scale parameter (here scale =133), so most dispersal is over shorter distances but some dispersal will be over a longer distance. You can play with the parameters to change the dispersal kernel. These could be based on a trait of the species.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#more skewed distribution\nhist(rweibull(1000, 0.5, 133), main= \"Weibull Distribution 2\", xlab=\"Dispersal Distance (km)\")\n```\n\n::: {.cell-output-display}\n![](Day1_Prac2_basics_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#less skewed distribution\nhist(rweibull(1000, 3, 133), main= \"Weibull Distribution 2\", xlab=\"Dispersal Distance (km)\")\n```\n\n::: {.cell-output-display}\n![](Day1_Prac2_basics_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n## Speciation (population divergence) {.unnumbered}\n\nIn the *speciation* function, we determine how populations diverge from one another and when they are sufficiently divergent to become new species. Populations that are geographically isolated (allopatric) diverge at each time step by the divergence factor and are considered new species when the accumulated divergence is greater than the divergence threshold. Divergence decreases when they come back into secondary contact at a rate of 1 and will coalesce into the same population once divergence is equal to 0.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfig$gen3sis$speciation\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$divergence_threshold\nNULL\n\n$get_divergence_factor\nNULL\n```\n:::\n:::\n\n\nIn this example, the *get_divergence_funtion* returns a value of 1 each timestep, so the divergence accumulates by a value of 1 at each time step and populations become new species when divergence is greater than the divergence threshold, here given a value of 2. So a new species can form if two populations has been isolated for two timesteps.\n\nWe can change either the amount of divergence required for speciation...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfig$gen3sis$speciation$divergence_threshold <- 4\n```\n:::\n\n\n...or the rate at which divergence accumulates.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfig$gen3sis$speciation$get_divergence_factor <- function(species, cluster_indices, landscape, config) { return(2)}\n```\n:::\n\n\nBoth of these will speed up the rate of speciation, given enough population fragmentation.\n\n## Mutation (trait evolution) {.unnumbered}\n\nIn the *evolution* function, we determine how the species' traits change at each timestep and therefore how they evolve over time. In *gen3sis*, each species is comprised of separate populations in each inhabited grid cell, these populations form geographic clusters that are within dispersal distance of one another and could be considered to exchange individuals, and all geographic clusters together comprise the species.\n\nWe can evolve traits of each population independently. Alternatively, we could give all populations within a geographic cluster shared trait values and evolve traits at this level of organization, or again at the whole species level. At which level of biological organization you evolve traits will depend on your hypothesis and the system you are trying to represent.\n\nIn addition to mutating the traits of species, we might also want to homogenise traits of populations that are likely exchanging gene flow.\n\nThis example, highlights both homogenising traits and evolving traits.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfig$gen3sis$mutation\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$apply_evolution\nNULL\n```\n:::\n:::\n\n\nHomogensation assigns each geographic cluster the avaerage trait value weighted by the abundance of each population. Here larger populations contribute more than smaller populations to the avergae.\n\nAfter homogenisation, the trait evolves by drawing random values from a normal distribution and adding these to the traits. A mean of 0 ensures that positive trait changes and negative trait changes are equally likely. The *trait_evolutionary_power* variable detemines the degree of trait evolution, with higher values leading to higher average trait changes each time step. This process of adding a random normal variable approximates a Brownian motion model of trait evolution.\n\n## Ecology (interactions) {.unnumbered}\n\nEvery species present in a cell across the landscape has an abundance value representing the population size of the species in that location. The ecology function allows users to modify this abundance value based on environmental values, species interactions, or anything else relevant to the study. An abundance of 0 leads to the extinction of the species in that cell.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfig$gen3sis$ecology\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$apply_ecology\nNULL\n```\n:::\n:::\n\n\nHere we use the temp trait (temperature niche position) and temp_breadth (temperature niche breadth) to determine whether a population can survive in cell. We get the absolute difference between the niche position and the temperature value in the grid cell. We then ask if this difference is more than the niche breadth. If it is larger, this means the value of the grid cell is outside the population's niche breadth and it goes extinct in that grid cell. Extinction is indicated by giving the abundance a value of 0 or setting the abundance to FALSE as done here.\n\nOK, that gives you the basic overview of all the main components of the gen3sis model. We will now move on to running some simulations on an island case study. But before we do, we may want to save any changes we made to the config for later. To do this use the following code.\n",
    "supporting": [
      "Day1_Prac2_basics_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
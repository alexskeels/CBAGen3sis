---
title: "Day 1 - Prac 3 - Islands"
author: "Alex Skeels and Oskar Hagen"
---

This practical uses a theoretical archipelago system. Each site (1x1 km), features temperature (i.e. mean, minimum and maximum temperature) and has a landscape structure that is generated by approximating topography, uplift dynamics, and a lapse rate of temperature with elevation. Additionally, it incorporates global temperature and sea level changes dating back to the past 5 million years (Ma).

You can look at an animation of the landscape [here](https://raw.githubusercontent.com/ohagen/DispDiv3/main/figures/AnimationS1_patch_dynamics.gif). We'll also have a look now.

# Dynamic Island Landscape

```{r}
# load landscapes

lc <- readRDS(file.path("data", "landscapes", "islands","landscapes.rds"))

# class(lc) "list"

# get names of landscape variables

names(lc)

# get first time step

first_step_pos <- ncol(lc$mean_temp)

# get first 10 sites of mean temperature for the 2 last time steps and the first (oldest) time step

lc$mean_temp[100:110, c(1:4, first_step_pos)]

# plot mean_temp for first and last time step

plot(rast(lc$mean_temp[ ,c(1:3, first_step_pos)]))
```

Plot out the landscape to understand it's dynamics. First define the function.

```{r}
plot_landenv <-  function(df, times=100:0, reverse=F, speed=0.1){
  # df is a data frame with x, y coordinates and time steps as columns with environmental variables
  # reverse is a boolean. Reverse the order of time steps?
  # times is either a vector of time steps or a character "all"
  # speed in seconds
  #df <- lc$temp
  if (times[1]=="all"){
   times <- names(df)[!names(df)%in%c("x", "y")] 
  }
  if (reverse){
    times <- rev(times)
  }
  for (ti in times){
    ri <- rast(df[,c("x", "y", ti)], type="xyz")
    plot(ri, main=paste(as.numeric(ti)/100, "Ma"))
    Sys.sleep(speed)
  }
}
```

Then run the animation function

```{r}
plot_landenv(lc$elevation, times=seq(from=1, to=500, by=50), speed=0.1)
```

load in a config

```{r}
# load config
cf <- create_input_config(config_file = "configs/island_config_simple.R")
# list all main elements of the config file
names(cf$gen3sis)
# list all elements of the general section, i.e. the main settings and not so much on the eco-evolutionary processes
names(cf$gen3sis$general)
```

# Run a basic simulation

```{r}
# run simulation
sim <- run_simulation(config = here("config/config_simple.R"), 
                      landscape = here("space"), 
                      output_directory = here("output"))
```

```{r}
sim <- readRDS(here("output/config_simple/sgen3sis.rds"))
```

```{r}
#check elements inside the sim object
names(sim)

# visualize the outputs
plot_summary(sim)

# plot richness from summary in custom fashion
na_mask <- is.na(lc$elevation[,"0"])
rich <- sim$summary$`richness-final`
rich[na_mask,3] <- NA
plot(rast(rich, type="xyz"), col=c("grey", gen3sis::color_richness_non_CVDCBP(max(rich, na.rm=T))), main="Richness")


# plot richness at time step 32 using saved data
sps32 <- readRDS(here("output/config_simple/species/species_t_32.rds"))
lc32 <- readRDS(here("output/config_simple/landscapes/landscape_t_32.rds"))
plot_richness(sps32, lc32)
```

```{r}
phy <- read.nexus(file.path(here("output/config_simple/phy.nex")))
plot(phy)
```

# Customize simulations

For an example of a more complex simulation, with species abundances, traits trading off and evolving check the config_M2_TH.R.

We will modify it so that allopatric speciation is faster.

\`\`\`{r, eval=FALSE}

conf \<- create_input_config(here("config/config_M2_TH.R"))

conf\$gen3sis\$speciation\$divergence_threshold = 30

\`\`\`

We will also change the observer function to save the presence/absence matrix for each time step.

\`\`\`{r, eval=FALSE}

conf\$gen3sis\$general\$end_of_timestep_observer = function(data, vars, config){

plot_richness(data\$all_species, data\$landscape)

\# make p/a matrices

out_dir \<- config\$directories\$output

if(!file.exists(file.path(out_dir,"occs"))){

dir.create(file.path(out_dir, "occs"))

}

\# cell names

all_cells \<- rownames(data\$landscape\$coordinates)

\# get 0 for absence and 1 for presence in each grid cell

asp \<- do.call(cbind,

lapply(data\$all_species, FUN = function(x) {

ifelse(all_cells %in% names(x\$abundance), 1, 0)

}))

\# colnames are species names

colnames(asp ) \<- unlist(lapply(data\$all_species, function(x){x\$id}))

\# column bind with x/y coordinates

presence_absence_matrix \<- cbind(data\$landscape\$coordinates, asp)

saveRDS(presence_absence_matrix,

file=file.path(out_dir,"occs", paste0("pa_t\_",vars\$ti, ".rds")))

}

\`\`\`

\`\`\`{r, eval=FALSE}

simod \<- run_simulation(config=conf,

landscape=here("space"),

output_directory=tempdir())

\`\`\`

The dynamics is different from the simple simulation, with more species and a some extinction events.

\`\`\`{r, echo=FALSE}

plot_summary(readRDS(here("output/config_M2_TH_mod/sgen3sis.rds")))

plot(read.nexus(file.path(here("output/config_M2_TH_mod/phy.nex"))))

\`\`\`

\<div style="background-color: lightgreen; padding: 1px;"\>

üèãüíª \*\*Exercise\*\* \[15 min\]

Review the config_M2_TH.R file and try to understand what it's doing. Consider how you might modify the configuration or apply it to a specific research question.

\</div\>

\## 5. Troubleshoot

Creating or modifying a gen3sis configuration can definitely lead to some weird errors, especially since it's so flexible. That's the downside, along with the steep learning curve. But if you're not too overwhelmed, you're doing great!

Here are some handy debugging tips for when you run into those pesky errors:

browser(): This function lets you pause the execution and explore what's going on. It's like a pit stop where you can check out variables and step through the code.

To make your R session enter browser mode whenever you hit an error, you can use: \*options(error = recover)\*. This will help you diagnose and fix issues more easily.

You can also condition browser calls, which is very useful when you want to stop execution at a specific time step or when a certain condition is met. Here's an example:

\`\`\`{r, eval=FALSE}

\# Use 'stop_time' to halt execution at a specific timestep in the landscape object:

stop_time \<- "62"

get_dispersal_values \<- function(n, species, landscape, config) {

if (landscape\$timestep == stop_time) {

browser()

}

\# You can also check the 'vars' object for the current timestep:

vars \<- dynGet("vars", inherits = TRUE)

if (vars\$ti == stop_time) {

browser()

}

}

\`\`\`
